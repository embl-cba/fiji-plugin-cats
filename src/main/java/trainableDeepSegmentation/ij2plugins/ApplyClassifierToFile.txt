package trainableDeepSegmentation.ij2plugins


#@ File(label="Classifier path", value="/Volumes/almf/group/ALMFstuff/ALMF_ImageAnalysisProjects/transmission-3D-stitching-organoid-size-measurement--data/01.classifier") CLASSIFIER_PATH
#@Integer(label="WellNum", value=50) WELL_NUM
#@ Integer(label="PosNum", value=1) POS_NUM
#@ File(label="Input directory", style="directory", value="/Volumes/almf/group/ALMFstuff/ALMF_ImageAnalysisProjects/transmission-3D-stitching-organoid-size-measurement--data/data/scanR-test-data-02-crop") INPUT_DIR
#@ File(label="Output directory", style="directory", value="/Volumes/almf/group/ALMFstuff/ALMF_ImageAnalysisProjects/transmission-3D-stitching-organoid-size-measurement--data/data/scanR-test-data-02-crop--out") OUTPUT_DIR

import ij.IJ;
import ij.ImageJ;
import ij.ImagePlus;
import ij.io.FileSaver;
import trainableDeepSegmentation.*;
import java.io.File;
import ij.measure.ResultsTable;
import inra.ijpb.measure.GeometricMeasures3D;

final Integer MIN_VOXELS = 10;

// Load data
//
String wellString = String.format( "%05d", WELL_NUM );
String posString = String.format( "%05d", POS_NUM );
String regExp = ".*--W" + wellString + "--P" + posString + "--Z.*--T00000--Trans.tif";

IJ.run("Image Sequence...",
        "open=["+ INPUT_DIR +"]"
                +"file=("+regExp+") sort");

ImagePlus inputImagePlus = IJ.getImage();

// Pixel classification
//
WekaSegmentation wekaSegmentation = new WekaSegmentation( );
wekaSegmentation.setInputImage( inputImagePlus );
wekaSegmentation.setResultImageRAM( );
wekaSegmentation.loadClassifier( CLASSIFIER_PATH );
wekaSegmentation.applyClassifierWithTiling();

// Connected components
//
ImagePlus labelMask = wekaSegmentation.getLabelMask( MIN_VOXELS );
//labelMask.show();

//  Object bounding boxes
//
ResultsTable rt_bb = GeometricMeasures3D.boundingBox( labelMask.getStack() );
//rt_bb.show( "Bounding boxes" );

//  Object volumes
//
double[] resolution = new double[3];
resolution[0] = 1.0;
resolution[1] = 1.0;
resolution[2] = 1.0;
ResultsTable rt_v = GeometricMeasures3D.volume( labelMask.getStack() , resolution );
//rt_v.show( "Volumes" );

WekaSegmentation.logger.info( "Number of objects: " + rt_v.size() );

// Saving results
//
String savingPath;

savingPath = "" + OUTPUT_DIR + File.separator + "R"+ regExp + "--labelMask.tif";
WekaSegmentation.logger.info("\n# Saving " + savingPath + "...");
FileSaver fileSaver = new FileSaver( labelMask );
fileSaver.saveAsTiff( savingPath );
WekaSegmentation.logger.info("...done.");

WekaSegmentation.logger.info("\n# Saving " + savingPath + "...");
savingPath = "" + OUTPUT_DIR + File.separator + "R"+ regExp + "--bounding-boxes.csv";
rt_bb.save(  savingPath );
WekaSegmentation.logger.info("...done.");

WekaSegmentation.logger.info("\n# Saving " + savingPath + "...");
savingPath = "" + OUTPUT_DIR + File.separator + "R"+ regExp + "--volumes.csv";
rt_v.save(  savingPath );
WekaSegmentation.logger.info("...done.");

IJ.run("Quit");
